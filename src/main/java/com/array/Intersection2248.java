package com.array;

import java.util.*;

public class Intersection2248 {
    public List<Integer> intersection(int[][] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        List<Integer> result = new ArrayList<>();

        Integer rowCount = nums.length;
        Integer columnCount = nums[0].length;


        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                if (!map.containsKey(new Integer(nums[i][j]))) {
                    map.put(nums[i][j], 1);
                } else {
                    map.put(nums[i][j], (map.get(nums[i][j]) + 1));
                }
            }
        }

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue().equals(rowCount)) {
                result.add(entry.getKey());
            }
        }

        result.sort((o1, o2) -> 1);

        return result;
    }

    public static void main(String[] args) {
        Intersection2248 question2248 = new Intersection2248();

        int test = 500;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 500);
        boolean b = map.get(0) == test;
        System.out.println(b);

        int[][] array = {{1, 999}, {2, 999}, {3, 999}, {4, 999}, {5, 999}, {6, 999}, {7, 999}, {8, 999}, {9, 999}, {10, 999}, {11, 999}, {12, 999}, {13, 999}, {14, 999}, {15, 999}, {16, 999}, {17, 999}, {18, 999}, {19, 999}, {20, 999}, {21, 999}, {22, 999}, {23, 999}, {24, 999}, {25, 999}, {26, 999}, {27, 999}, {28, 999}, {29, 999}, {30, 999}, {31, 999}, {32, 999}, {33, 999}, {34, 999}, {35, 999}, {36, 999}, {37, 999}, {38, 999}, {39, 999}, {40, 999}, {41, 999}, {42, 999}, {43, 999}, {44, 999}, {45, 999}, {46, 999}, {47, 999}, {48, 999}, {49, 999}, {50, 999}, {51, 999}, {52, 999}, {53, 999}, {54, 999}, {55, 999}, {56, 999}, {57, 999}, {58, 999}, {59, 999}, {60, 999}, {61, 999}, {62, 999}, {63, 999}, {64, 999}, {65, 999}, {66, 999}, {67, 999}, {68, 999}, {69, 999}, {70, 999}, {71, 999}, {72, 999}, {73, 999}, {74, 999}, {75, 999}, {76, 999}, {77, 999}, {78, 999}, {79, 999}, {80, 999}, {81, 999}, {82, 999}, {83, 999}, {84, 999}, {85, 999}, {86, 999}, {87, 999}, {88, 999}, {89, 999}, {90, 999}, {91, 999}, {92, 999}, {93, 999}, {94, 999}, {95, 999}, {96, 999}, {97, 999}, {98, 999}, {99, 999}, {100, 999}, {101, 999}, {102, 999}, {103, 999}, {104, 999}, {105, 999}, {106, 999}, {107, 999}, {108, 999}, {109, 999}, {110, 999}, {111, 999}, {112, 999}, {113, 999}, {114, 999}, {115, 999}, {116, 999}, {117, 999}, {118, 999}, {119, 999}, {120, 999}, {121, 999}, {122, 999}, {123, 999}, {124, 999}, {125, 999}, {126, 999}, {127, 999}, {128, 999}, {129, 999}, {130, 999}, {131, 999}, {132, 999}, {133, 999}, {134, 999}, {135, 999}, {136, 999}, {137, 999}, {138, 999}, {139, 999}, {140, 999}, {141, 999}, {142, 999}, {143, 999}, {144, 999}, {145, 999}, {146, 999}, {147, 999}, {148, 999}, {149, 999}, {150, 999}, {151, 999}, {152, 999}, {153, 999}, {154, 999}, {155, 999}, {156, 999}, {157, 999}, {158, 999}, {159, 999}, {160, 999}, {161, 999}, {162, 999}, {163, 999}, {164, 999}, {165, 999}, {166, 999}, {167, 999}, {168, 999}, {169, 999}, {170, 999}, {171, 999}, {172, 999}, {173, 999}, {174, 999}, {175, 999}, {176, 999}, {177, 999}, {178, 999}, {179, 999}, {180, 999}, {181, 999}, {182, 999}, {183, 999}, {184, 999}, {185, 999}, {186, 999}, {187, 999}, {188, 999}, {189, 999}, {190, 999}, {191, 999}, {192, 999}, {193, 999}, {194, 999}, {195, 999}, {196, 999}, {197, 999}, {198, 999}, {199, 999}, {200, 999}, {201, 999}, {202, 999}, {203, 999}, {204, 999}, {205, 999}, {206, 999}, {207, 999}, {208, 999}, {209, 999}, {210, 999}, {211, 999}, {212, 999}, {213, 999}, {214, 999}, {215, 999}, {216, 999}, {217, 999}, {218, 999}, {219, 999}, {220, 999}, {221, 999}, {222, 999}, {223, 999}, {224, 999}, {225, 999}, {226, 999}, {227, 999}, {228, 999}, {229, 999}, {230, 999}, {231, 999}, {232, 999}, {233, 999}, {234, 999}, {235, 999}, {236, 999}, {237, 999}, {238, 999}, {239, 999}, {240, 999}, {241, 999}, {242, 999}, {243, 999}, {244, 999}, {245, 999}, {246, 999}, {247, 999}, {248, 999}, {249, 999}, {250, 999}, {251, 999}, {252, 999}, {253, 999}, {254, 999}, {255, 999}, {256, 999}, {257, 999}, {258, 999}, {259, 999}, {260, 999}, {261, 999}, {262, 999}, {263, 999}, {264, 999}, {265, 999}, {266, 999}, {267, 999}, {268, 999}, {269, 999}, {270, 999}, {271, 999}, {272, 999}, {273, 999}, {274, 999}, {275, 999}, {276, 999}, {277, 999}, {278, 999}, {279, 999}, {280, 999}, {281, 999}, {282, 999}, {283, 999}, {284, 999}, {285, 999}, {286, 999}, {287, 999}, {288, 999}, {289, 999}, {290, 999}, {291, 999}, {292, 999}, {293, 999}, {294, 999}, {295, 999}, {296, 999}, {297, 999}, {298, 999}, {299, 999}, {300, 999}, {301, 999}, {302, 999}, {303, 999}, {304, 999}, {305, 999}, {306, 999}, {307, 999}, {308, 999}, {309, 999}, {310, 999}, {311, 999}, {312, 999}, {313, 999}, {314, 999}, {315, 999}, {316, 999}, {317, 999}, {318, 999}, {319, 999}, {320, 999}, {321, 999}, {322, 999}, {323, 999}, {324, 999}, {325, 999}, {326, 999}, {327, 999}, {328, 999}, {329, 999}, {330, 999}, {331, 999}, {332, 999}, {333, 999}, {334, 999}, {335, 999}, {336, 999}, {337, 999}, {338, 999}, {339, 999}, {340, 999}, {341, 999}, {342, 999}, {343, 999}, {344, 999}, {345, 999}, {346, 999}, {347, 999}, {348, 999}, {349, 999}, {350, 999}, {351, 999}, {352, 999}, {353, 999}, {354, 999}, {355, 999}, {356, 999}, {357, 999}, {358, 999}, {359, 999}, {360, 999}, {361, 999}, {362, 999}, {363, 999}, {364, 999}, {365, 999}, {366, 999}, {367, 999}, {368, 999}, {369, 999}, {370, 999}, {371, 999}, {372, 999}, {373, 999}, {374, 999}, {375, 999}, {376, 999}, {377, 999}, {378, 999}, {379, 999}, {380, 999}, {381, 999}, {382, 999}, {383, 999}, {384, 999}, {385, 999}, {386, 999}, {387, 999}, {388, 999}, {389, 999}, {390, 999}, {391, 999}, {392, 999}, {393, 999}, {394, 999}, {395, 999}, {396, 999}, {397, 999}, {398, 999}, {399, 999}, {400, 999}, {401, 999}, {402, 999}, {403, 999}, {404, 999}, {405, 999}, {406, 999}, {407, 999}, {408, 999}, {409, 999}, {410, 999}, {411, 999}, {412, 999}, {413, 999}, {414, 999}, {415, 999}, {416, 999}, {417, 999}, {418, 999}, {419, 999}, {420, 999}, {421, 999}, {422, 999}, {423, 999}, {424, 999}, {425, 999}, {426, 999}, {427, 999}, {428, 999}, {429, 999}, {430, 999}, {431, 999}, {432, 999}, {433, 999}, {434, 999}, {435, 999}, {436, 999}, {437, 999}, {438, 999}, {439, 999}, {440, 999}, {441, 999}, {442, 999}, {443, 999}, {444, 999}, {445, 999}, {446, 999}, {447, 999}, {448, 999}, {449, 999}, {450, 999}, {451, 999}, {452, 999}, {453, 999}, {454, 999}, {455, 999}, {456, 999}, {457, 999}, {458, 999}, {459, 999}, {460, 999}, {461, 999}, {462, 999}, {463, 999}, {464, 999}, {465, 999}, {466, 999}, {467, 999}, {468, 999}, {469, 999}, {470, 999}, {471, 999}, {472, 999}, {473, 999}, {474, 999}, {475, 999}, {476, 999}, {477, 999}, {478, 999}, {479, 999}, {480, 999}, {481, 999}, {482, 999}, {483, 999}, {484, 999}, {485, 999}, {486, 999}, {487, 999}, {488, 999}, {489, 999}, {490, 999}, {491, 999}, {492, 999}, {493, 999}, {494, 999}, {495, 999}, {496, 999}, {497, 999}, {498, 999}, {499, 999}, {500, 999}};
        //List<Integer> result = question2248.intersection(array);


//        result.stream().forEach(new Consumer<Integer>() {
//            @Override
//            public void accept(Integer integer) {
//                System.out.println(integer);
//            }
//        });
    }

    public int[] intersection(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        Map<Integer, Integer> map = new HashMap<>();
        List<Integer> result = new LinkedList<>();

        // two pointers
        //for (int i = 0; i < nums1.length; i++) {
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] == nums2[j]) {
                result.add(nums1[i]);
                i++;
                j++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            }
        }
        int[] array = result.stream().mapToInt(value -> value).toArray();
        return array;
    }

}
